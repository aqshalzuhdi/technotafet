// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entities/entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8143610749960296744),
      name: 'AthleteEntity',
      lastPropertyId: const obx_int.IdUid(2, 7449027162969914656),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 464322261570047968),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7449027162969914656),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'exercises', srcEntity: 'ExerciseEntity', srcField: 'athlete')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5214402749479836935),
      name: 'ExerciseEntity',
      lastPropertyId: const obx_int.IdUid(6, 2194777369943275937),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2161495251245119328),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8152918271146549380),
            name: 'groupType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4728171522499887716),
            name: 'category',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8201692370584897338),
            name: 'time',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2234384175522123393),
            name: 'createdAt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2194777369943275937),
            name: 'athleteId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 6522018525094591846),
            relationTarget: 'AthleteEntity')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 5214402749479836935),
      lastIndexId: const obx_int.IdUid(1, 6522018525094591846),
      lastRelationId: const obx_int.IdUid(1, 8638517623615859838),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [8638517623615859838],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AthleteEntity: obx_int.EntityDefinition<AthleteEntity>(
        model: _entities[0],
        toOneRelations: (AthleteEntity object) => [],
        toManyRelations: (AthleteEntity object) => {
              obx_int.RelInfo<ExerciseEntity>.toOneBacklink(6, object.id,
                      (ExerciseEntity srcObject) => srcObject.athlete):
                  object.exercises
            },
        getId: (AthleteEntity object) => object.id,
        setId: (AthleteEntity object, int id) {
          object.id = id;
        },
        objectToFB: (AthleteEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = AthleteEntity(id: idParam, name: nameParam);
          obx_int.InternalToManyAccess.setRelInfo<AthleteEntity>(
              object.exercises,
              store,
              obx_int.RelInfo<ExerciseEntity>.toOneBacklink(6, object.id,
                  (ExerciseEntity srcObject) => srcObject.athlete));
          return object;
        }),
    ExerciseEntity: obx_int.EntityDefinition<ExerciseEntity>(
        model: _entities[1],
        toOneRelations: (ExerciseEntity object) => [object.athlete],
        toManyRelations: (ExerciseEntity object) => {},
        getId: (ExerciseEntity object) => object.id,
        setId: (ExerciseEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ExerciseEntity object, fb.Builder fbb) {
          final createdAtOffset = fbb.writeString(object.createdAt);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.groupType);
          fbb.addInt64(2, object.category);
          fbb.addFloat64(3, object.time);
          fbb.addOffset(4, createdAtOffset);
          fbb.addInt64(5, object.athlete.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final groupTypeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final categoryParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final timeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final createdAtParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final object = ExerciseEntity(
              id: idParam,
              groupType: groupTypeParam,
              category: categoryParam,
              time: timeParam,
              createdAt: createdAtParam);
          object.athlete.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.athlete.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AthleteEntity] entity fields to define ObjectBox queries.
class AthleteEntity_ {
  /// See [AthleteEntity.id].
  static final id =
      obx.QueryIntegerProperty<AthleteEntity>(_entities[0].properties[0]);

  /// See [AthleteEntity.name].
  static final name =
      obx.QueryStringProperty<AthleteEntity>(_entities[0].properties[1]);

  /// see [AthleteEntity.exercises]
  static final exercises =
      obx.QueryBacklinkToMany<ExerciseEntity, AthleteEntity>(
          ExerciseEntity_.athlete);
}

/// [ExerciseEntity] entity fields to define ObjectBox queries.
class ExerciseEntity_ {
  /// See [ExerciseEntity.id].
  static final id =
      obx.QueryIntegerProperty<ExerciseEntity>(_entities[1].properties[0]);

  /// See [ExerciseEntity.groupType].
  static final groupType =
      obx.QueryIntegerProperty<ExerciseEntity>(_entities[1].properties[1]);

  /// See [ExerciseEntity.category].
  static final category =
      obx.QueryIntegerProperty<ExerciseEntity>(_entities[1].properties[2]);

  /// See [ExerciseEntity.time].
  static final time =
      obx.QueryDoubleProperty<ExerciseEntity>(_entities[1].properties[3]);

  /// See [ExerciseEntity.createdAt].
  static final createdAt =
      obx.QueryStringProperty<ExerciseEntity>(_entities[1].properties[4]);

  /// See [ExerciseEntity.athlete].
  static final athlete = obx.QueryRelationToOne<ExerciseEntity, AthleteEntity>(
      _entities[1].properties[5]);
}
